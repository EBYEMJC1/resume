// --- GLOBAL STATE VARIABLES ---
let dynamicSections = [];
let resumeContentData = { header: { name: '', address: '', email: '', phone: '', customLinks: [] }, sections: {} };
let editingContext = null;
let moveCopyContext = null;
let originalDocumentTitle = '';
const LOCAL_STORAGE_KEY = 'resumeBuilderData';

// --- LOCALSTORAGE SAVE & LOAD FUNCTIONS ---
function saveToLocalStorage() {
    console.log("Saving current state to localStorage...");
    try {
        updateHeaderDataFromInputs(); 
        
        const dataToSave = {
            dynamicSections,
            resumeContentData
        };
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(dataToSave));
        alert("Changes saved in your browser!");
    } catch (error) {
        console.error("Error saving to localStorage:", error);
        alert("Could not save changes. Your browser's storage might be full or disabled.");
    }
}

function loadFromLocalStorage() {
    console.log("Attempting to load from localStorage...");
    const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (savedData) {
        try {
            const parsedData = JSON.parse(savedData);
            if (parsedData.dynamicSections && parsedData.resumeContentData) {
                console.log("Saved data found. Loading from localStorage.");
                dynamicSections = parsedData.dynamicSections;
                resumeContentData = parsedData.resumeContentData;
                return true;
            }
        } catch (error) {
            console.error("Error parsing data from localStorage:", error);
            return false;
        }
    }
    console.log("No valid data found in localStorage.");
    return false;
}

// --- CORE INITIALIZATION ---
async function initializeResume() {
    originalDocumentTitle = document.title;
    
    const loadedFromStorage = loadFromLocalStorage();

    if (!loadedFromStorage) {
        console.log("Loading default data from JSON files...");
        
        dynamicSections = [
            { id: 'education', title: 'Education', type: 'education-entry' },
            { id: 'technical-skills', title: 'Technical Skills', type: 'paragraph' },
            { id: 'relevant-coursework', title: 'Relevant Coursework', type: 'coursework-list'},
            { id: 'relevant-experience', title: 'Relevant Experience', type: 'structured-entry' },
            { id: 'other-experience', title: 'Other Experience', type: 'structured-entry' },
            { id: 'extracurricular', title: 'Extracurricular Activities', type: 'list-item' }
        ];

        const dataFiles = {
            'education-entry': 'education-entry.json',
            'paragraph': 'paragraph.json',
            'coursework-list': 'coursework-list.json',
            'structured-entry': 'structured-entry.json',
            'list-item': 'list-item.json'
        };

        const filesToFetch = [...new Set(dynamicSections.map(s => dataFiles[s.type]))];
        
        const fetchPromises = filesToFetch.map(file =>
            fetch(file)
                .then(res => res.ok ? res.json() : Promise.reject(`Failed to load ${file}`))
                .catch(error => { console.error(error); return {}; })
        );

        try {
            const allData = await Promise.all(fetchPromises);
            const fileDataMap = {};
            filesToFetch.forEach((file, index) => { fileDataMap[file] = allData[index]; });

            // --- THE FIX IS HERE ---
            // The logic now correctly populates the main data object from the fetched files.
            dynamicSections.forEach(section => {
                const fileNameForType = dataFiles[section.type]; // e.g., 'coursework-list.json'
                const fileContent = fileDataMap[fileNameForType]; // The entire JS object from that file
                
                // Look for a key in the file content that matches the section's ID.
                if (fileContent && fileContent[section.id]) {
                    resumeContentData.sections[section.id] = fileContent[section.id];
                } else {
                    resumeContentData.sections[section.id] = []; // Fallback to empty if not found
                }
            });

            resumeContentData.header = {
                name: 'Sara Sadek',
                address: 'Rancho Santa Margarita, CA 92688',
                email: 'EBYEMJCitoaoL@gmail.com',
                phone: '(310) 595-0876',
                customLinks: [
                    { label: 'LinkedIn', url: 'https://www.linkedin.com/in/sara-ayoub-sadek-630b55168', showQr: true }
                ]
            };

        } catch (error) {
            console.error("Fatal error loading initial resume data:", error);
            alert("Could not load default data from JSON files.");
        }
    }
    
    document.getElementById('name').value = resumeContentData.header.name || '';
    document.getElementById('address').value = resumeContentData.header.address || '';
    document.getElementById('email').value = resumeContentData.header.email || '';
    document.getElementById('phone').value = resumeContentData.header.phone || '';
    renderHeaderLinkInputs();
    
    updateHeader();
    renderResumeSections();
    populateSectionDropdowns();
    renderSectionRemovalList();
    setupEventListeners();
}

// ... the rest of the file is unchanged, but included for completeness ...

function setupEventListeners() {
    ['name', 'address', 'email', 'phone'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.oninput = updateHeader;
    });
    document.getElementById('resume-sections').addEventListener('click', handleResumeInteraction);
    document.getElementById('move-copy-confirm').addEventListener('click', performMoveCopyEntry);
    document.getElementById('move-copy-cancel').addEventListener('click', closeMoveCopyModal);
}

function processBolding(text) { if (typeof text !== 'string') return text; return text.replace(/\*\*(.*?)\*\*/gi, '<strong>$1</strong>');}
function parseDateForSorting(dateStr) { if (!dateStr || typeof dateStr !== 'string') return null; const lowerDateStr = dateStr.toLowerCase(); if (lowerDateStr.includes("present")) return new Date(9999, 0, 1); const fullRangeMatch = dateStr.match(/(?:[A-Za-z]{3,})\s+\d{4}\s*[-–]\s*([A-Za-z]{3,})\s+(\d{4})/i); if (fullRangeMatch && fullRangeMatch[1] && fullRangeMatch[2]) { const monthNames = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]; const monthIndex = monthNames.indexOf(fullRangeMatch[1].substring(0,3).toLowerCase()); if (monthIndex > -1) return new Date(parseInt(fullRangeMatch[2]), monthIndex, 1); } const yearRangeMatch = dateStr.match(/\d{4}\s*[-–]\s*(\d{4})/); if (yearRangeMatch && yearRangeMatch[1]) return new Date(parseInt(yearRangeMatch[1]), 11, 31); const monthYearMatch = dateStr.match(/([A-Za-z]{3,})\s+(\d{4})/); if (monthYearMatch && monthYearMatch[1] && monthYearMatch[2]) { const monthNames = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]; const monthIndex = monthNames.indexOf(monthYearMatch[1].substring(0,3).toLowerCase()); if (monthIndex > -1) return new Date(parseInt(monthYearMatch[2]), monthIndex, 1); } const yearOnlyMatch = dateStr.match(/^(\d{4})$/); if (yearOnlyMatch && yearOnlyMatch[1]) return new Date(parseInt(yearOnlyMatch[1]), 11, 31); const yearMatches = dateStr.match(/\d{4}/g); if (yearMatches && yearMatches.length > 0) { const latestYear = Math.max(...yearMatches.map(Number)); const specificMonthYearRegex = new RegExp(`([A-Za-z]{3,})\\s+${latestYear}`); const specificMonthYearMatch = dateStr.match(specificMonthYearRegex); if (specificMonthYearMatch) { const monthNames = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]; const monthIndex = monthNames.indexOf(specificMonthYearMatch[1].substring(0,3).toLowerCase()); if (monthIndex > -1) return new Date(latestYear, monthIndex, 1); } return new Date(latestYear, 11, 31); } return null; }

function addHeaderLinkInput(label = '', url = '', showQr = false) { const container = document.getElementById('header-links-input-container'); const linkGroup = document.createElement('div'); linkGroup.classList.add('header-link-input-group'); const labelInput = document.createElement('input'); labelInput.type = 'text'; labelInput.classList.add('link-label-input'); labelInput.placeholder = 'Label (e.g., GitHub)'; labelInput.value = label; labelInput.oninput = updateHeader; const urlInput = document.createElement('input'); urlInput.type = 'text'; urlInput.classList.add('link-url-input'); urlInput.placeholder = 'URL (https://...)'; urlInput.value = url; urlInput.oninput = updateHeader; const qrToggleLabel = document.createElement('label'); qrToggleLabel.classList.add('link-qr-toggle-label'); const qrToggleCheckbox = document.createElement('input'); qrToggleCheckbox.type = 'checkbox'; qrToggleCheckbox.classList.add('link-qr-toggle'); qrToggleCheckbox.checked = showQr; qrToggleCheckbox.title = 'Show QR Code'; qrToggleCheckbox.onchange = updateHeader; qrToggleLabel.appendChild(qrToggleCheckbox); qrToggleLabel.appendChild(document.createTextNode(' QR')); const removeButton = document.createElement('button'); removeButton.type = 'button'; removeButton.classList.add('remove-link-button'); removeButton.textContent = '✕'; removeButton.title = 'Remove Link'; removeButton.onclick = function() { linkGroup.remove(); updateHeader(); }; linkGroup.appendChild(labelInput); linkGroup.appendChild(urlInput); linkGroup.appendChild(qrToggleLabel); linkGroup.appendChild(removeButton); container.appendChild(linkGroup); }
function renderHeaderLinkInputs() { const container = document.getElementById('header-links-input-container'); container.innerHTML = ''; (resumeContentData.header.customLinks || []).forEach(link => { addHeaderLinkInput(link.label, link.url, link.showQr); }); if (!resumeContentData.header.customLinks || resumeContentData.header.customLinks.length === 0) { addHeaderLinkInput('', '', false); } }
function populateSectionDropdowns() { const sectionSelects = document.querySelectorAll('.section-select'); sectionSelects.forEach(select => { const currentSelectedId = select.value; select.innerHTML = ''; let relevantSections = []; const formType = select.id.split('-')[0]; const targetEntryType = formType === 'edu' ? 'education-entry' : (formType === 'para' ? 'paragraph' : (formType === 'structured' ? 'structured-entry' : (formType === 'list' ? 'list-item' : (formType === 'coursework' ? 'coursework-list' : '')))); relevantSections = dynamicSections.filter(s => s.type === targetEntryType); if (relevantSections.length === 0) { select.innerHTML = `<option value="">No '${targetEntryType}' sections</option>`; select.disabled = true; } else { select.disabled = false; relevantSections.forEach(section => { const option = document.createElement('option'); option.value = section.id; option.textContent = section.title; select.appendChild(option); }); if (currentSelectedId && relevantSections.some(s => s.id === currentSelectedId)) { select.value = currentSelectedId; } else { select.value = relevantSections[0]?.id || ''; } } if (select.id === 'coursework-section-select' && select.value && !editingContext) { cancelEdit('coursework'); } }); }
function addSection() { const titleInput = document.getElementById('new-section-title'); const typeSelect = document.getElementById('new-section-type'); const title = titleInput.value.trim(); const type = typeSelect.value; if (!title) { alert("Please enter a section title."); return; } const baseId = title.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''); let sectionId = baseId || `new-section-${Date.now()}`; let counter = 1; while (dynamicSections.some(s => s.id === sectionId)) { sectionId = `${baseId}-${counter++}`; if (counter > 100) { sectionId = `section-${Date.now()}`; break; } } dynamicSections.push({ id: sectionId, title: title, type: type }); resumeContentData.sections[sectionId] = []; renderResumeSections(); populateSectionDropdowns(); renderSectionRemovalList(); titleInput.value = ''; }
function promptAndUpdateSectionTitle(sectionId, currentTitle) { const newTitle = prompt("Enter the new title for this section:", currentTitle); if (newTitle && newTitle.trim() !== "" && newTitle.trim() !== currentTitle) { updateSectionTitle(sectionId, newTitle.trim()); } }
function updateSectionTitle(sectionId, newTitle) { const section = dynamicSections.find(s => s.id === sectionId); if (section) { section.title = newTitle; renderResumeSections(); renderSectionRemovalList(); populateSectionDropdowns(); } }
function renderSectionRemovalList() { const removeList = document.getElementById('section-remove-list'); removeList.innerHTML = ''; dynamicSections.forEach((section, index) => { const li = document.createElement('li'); const nameSpan = document.createElement('span'); nameSpan.classList.add('section-name'); nameSpan.textContent = section.title; li.appendChild(nameSpan); const controlsDiv = document.createElement('div'); const editTitleButton = document.createElement('button'); editTitleButton.textContent = 'Edit Title'; editTitleButton.title = 'Edit Section Title'; editTitleButton.classList.add('edit-title-button'); editTitleButton.onclick = () => promptAndUpdateSectionTitle(section.id, section.title); controlsDiv.appendChild(editTitleButton); const upButton = document.createElement('button'); upButton.classList.add('order-button'); upButton.innerHTML = '▲'; upButton.onclick = () => moveSection(section.id, 'up'); upButton.disabled = index === 0; controlsDiv.appendChild(upButton); const downButton = document.createElement('button'); downButton.classList.add('order-button'); downButton.innerHTML = '▼'; downButton.onclick = () => moveSection(section.id, 'down'); downButton.disabled = index === dynamicSections.length - 1; controlsDiv.appendChild(downButton); const removeButtonElement = document.createElement('button'); removeButtonElement.classList.add('remove-button'); removeButtonElement.textContent = 'Remove'; removeButtonElement.type = 'button'; removeButtonElement.onclick = () => removeSection(section.id); controlsDiv.appendChild(removeButtonElement); li.appendChild(controlsDiv); removeList.appendChild(li); }); }
function moveSection(sectionId, direction) { const index = dynamicSections.findIndex(s => s.id === sectionId); if (index === -1) return; if (direction === 'up' && index > 0) { [dynamicSections[index], dynamicSections[index - 1]] = [dynamicSections[index - 1], dynamicSections[index]]; } else if (direction === 'down' && index < dynamicSections.length - 1) { [dynamicSections[index], dynamicSections[index + 1]] = [dynamicSections[index + 1], dynamicSections[index]]; } renderResumeSections(); renderSectionRemovalList(); }
function removeSection(id) { const index = dynamicSections.findIndex(section => section.id === id); if (index !== -1) { if (!confirm(`Are you sure you want to remove the "${dynamicSections[index].title}" section?`)) return; dynamicSections.splice(index, 1); delete resumeContentData.sections[id]; renderResumeSections(); populateSectionDropdowns(); renderSectionRemovalList(); } }
function setFormMode(formTypeKey, isEditing) { const submitButton = document.getElementById(`${formTypeKey}-submit-button`); const cancelButton = document.getElementById(`${formTypeKey}-cancel-button`); if (formTypeKey === 'coursework') { const addCourseBtn = document.getElementById('coursework-submit-button'); if(addCourseBtn) addCourseBtn.textContent = isEditing ? 'Update Course' : 'Add Course'; } else if (submitButton) { const typeName = formTypeKey === 'paragraph' ? 'Content' : (formTypeKey === 'list' ? 'Item' : 'Entry'); submitButton.textContent = isEditing ? `Update ${typeName}` : `Add ${typeName}`; } if (cancelButton) cancelButton.style.display = isEditing ? 'inline-block' : 'none'; }
function clearForm(formTypeKey) { if (formTypeKey === 'education') { ['edu-degree', 'edu-institution', 'edu-date', 'edu-gpa', 'edu-expected'].forEach(id => document.getElementById(id).value = ''); } else if (formTypeKey === 'structured') { ['structured-position', 'structured-company', 'structured-location', 'structured-dates'].forEach(id => document.getElementById(id).value = ''); const bulletsContainer = document.getElementById('structured-bullets-container'); bulletsContainer.querySelectorAll('.bullet-item').forEach(item => item.remove()); addMainBulletInputForm('structured-bullets-container', ''); } else if (formTypeKey === 'list') { const bulletsContainer = document.getElementById('list-bullets-container'); bulletsContainer.querySelectorAll('.bullet-item').forEach(item => item.remove()); addMainBulletInputForm('list-bullets-container', ''); } else if (formTypeKey === 'paragraph'){ document.getElementById('skills-content').value = ''; } else if (formTypeKey === 'coursework') { document.getElementById('coursework-name-new').value = ''; document.getElementById('coursework-grade-new').value = ''; document.getElementById('coursework-show-grade-new').checked = false; } }
function cancelEdit(formTypeKey) { editingContext = null; setFormMode(formTypeKey, false); clearForm(formTypeKey); if (formTypeKey === 'structured' && document.querySelectorAll('#structured-bullets-container .bullet-item').length === 0) { addMainBulletInputForm('structured-bullets-container', 'e.g. Ensured high order accuracy...'); } if (formTypeKey === 'list' && document.querySelectorAll('#list-bullets-container .bullet-item').length === 0) { addMainBulletInputForm('list-bullets-container', 'e.g. Member | Month YYYY - Present'); } }
function addMainBulletInputForm(containerId, value = '', subBullets = []) { const container = document.getElementById(containerId); const feedbackArea = container.querySelector('.bullet-feedback-area'); const mainBulletGroup = document.createElement('div'); mainBulletGroup.classList.add('bullet-item'); const mainBulletControls = document.createElement('div'); mainBulletControls.classList.add('main-bullet-controls'); const input = document.createElement('input'); input.type = 'text'; input.classList.add('main-bullet-input'); input.placeholder = 'Enter main bullet'; input.value = value; const addSubBtn = document.createElement('button'); addSubBtn.type = 'button'; addSubBtn.classList.add('add-sub-bullet-button'); addSubBtn.textContent = '+Sub'; addSubBtn.onclick = () => addSubBulletInputForm(mainBulletGroup, ''); const removeMainBtn = document.createElement('button'); removeMainBtn.type = 'button'; removeMainBtn.classList.add('remove-bullet-button'); removeMainBtn.textContent = '✕ Main'; removeMainBtn.onclick = () => mainBulletGroup.remove(); mainBulletControls.appendChild(input); mainBulletControls.appendChild(addSubBtn); mainBulletControls.appendChild(removeMainBtn); mainBulletGroup.appendChild(mainBulletControls); const subBulletListContainer = document.createElement('div'); subBulletListContainer.classList.add('sub-bullet-item-container'); mainBulletGroup.appendChild(subBulletListContainer); if (feedbackArea) container.insertBefore(mainBulletGroup, feedbackArea); else container.appendChild(mainBulletGroup); (subBullets || []).forEach(subValue => addSubBulletInputForm(mainBulletGroup, subValue)); return mainBulletGroup; }
function addSubBulletInputForm(mainBulletGroupElement, value = '') { const subBulletListContainer = mainBulletGroupElement.querySelector('.sub-bullet-item-container'); if (!subBulletListContainer) return; const subBulletDiv = document.createElement('div'); subBulletDiv.classList.add('sub-bullet-item'); const input = document.createElement('input'); input.type = 'text'; input.classList.add('sub-bullet-input'); input.placeholder = 'Enter sub-bullet'; input.value = value; const removeSubBtn = document.createElement('button'); removeSubBtn.type = 'button'; removeSubBtn.classList.add('remove-sub-bullet-button'); removeSubBtn.textContent = '✕ Sub'; removeSubBtn.onclick = () => subBulletDiv.remove(); subBulletDiv.appendChild(input); subBulletDiv.appendChild(removeSubBtn); subBulletListContainer.appendChild(subBulletDiv); return subBulletDiv; }
function addEducationEntry(sectionId, data) { const section = dynamicSections.find(s => s.id === sectionId); if (!section || section.type !== 'education-entry') return false; data.sortDate = parseDateForSorting(data.date) || new Date(0); if (!data.sortDate && data.date) console.warn(`Education entry date "${data.date}" could not be parsed for sorting.`); if (!resumeContentData.sections[sectionId]) resumeContentData.sections[sectionId] = []; if (editingContext && editingContext.sectionId === sectionId && editingContext.type === 'education-entry' && typeof editingContext.entryIndex === 'number') { resumeContentData.sections[sectionId][editingContext.entryIndex] = data; } else { resumeContentData.sections[sectionId].push(data); } populateResumeContent(); return true; }
function addEducationEntryForm() { const sectionId = document.getElementById('edu-section-select').value; if (!sectionId) { alert("Please select section."); return; } const data = { degree: document.getElementById('edu-degree').value, institution: document.getElementById('edu-institution').value, date: document.getElementById('edu-date').value, gpa: document.getElementById('edu-gpa').value, expected: document.getElementById('edu-expected').value }; if (!data.degree || !data.institution || !data.date) { alert("Degree, Institution, Date required."); return; } if (addEducationEntry(sectionId, data)) cancelEdit('education'); }
function setParagraphContent(sectionId, content) { const section = dynamicSections.find(s => s.id === sectionId); if (!section || section.type !== 'paragraph') return; if (editingContext && editingContext.sectionId === sectionId && editingContext.type === 'paragraph' && typeof editingContext.entryIndex === 'number') { if (content && content.trim() !== '') { resumeContentData.sections[sectionId][editingContext.entryIndex] = content; } else { resumeContentData.sections[sectionId].splice(editingContext.entryIndex, 1); } } else { resumeContentData.sections[sectionId] = (content && content.trim() !== '') ? [content] : []; } populateResumeContent(); }
function setParagraphContentForm() { const sectionId = document.getElementById('para-section-select').value; if (!sectionId) { alert("Please select section."); return; } const content = document.getElementById('skills-content').value; setParagraphContent(sectionId, content); if (editingContext && editingContext.type === 'paragraph') { cancelEdit('paragraph'); } else if (!content || content.trim() === '') { clearForm('paragraph'); } }
function addStructuredEntry(sectionId, data) { const section = dynamicSections.find(s => s.id === sectionId); if (!section || section.type !== 'structured-entry') return false; data.sortDate = parseDateForSorting(data.dates) || new Date(0); if (!data.sortDate && data.dates) console.warn(`Structured entry dates "${data.dates}" could not be parsed for sorting.`); if (!resumeContentData.sections[sectionId]) resumeContentData.sections[sectionId] = []; if (editingContext && editingContext.sectionId === sectionId && editingContext.type === 'structured-entry' && typeof editingContext.entryIndex === 'number') { resumeContentData.sections[sectionId][editingContext.entryIndex] = data; } else { resumeContentData.sections[sectionId].push(data); } populateResumeContent(); return true; }
function addStructuredEntryForm() { const sectionId = document.getElementById('structured-section-select').value; if (!sectionId) { alert("Select section."); return; } const bulletsData = []; document.querySelectorAll('#structured-bullets-container .bullet-item').forEach(mainBulletEl => { const mainText = mainBulletEl.querySelector('.main-bullet-input').value.trim(); if (mainText) { const subTexts = Array.from(mainBulletEl.querySelectorAll('.sub-bullet-item .sub-bullet-input')).map(subEl => subEl.value.trim()).filter(Boolean); bulletsData.push(subTexts.length > 0 ? { text: mainText, subBullets: subTexts } : mainText); } }); const data = { position: document.getElementById('structured-position').value, company: document.getElementById('structured-company').value, location: document.getElementById('structured-location').value, dates: document.getElementById('structured-dates').value, bullets: bulletsData }; if (!data.position || !data.company || !data.dates) { alert("Position, Company, Dates required."); return; } if (data.bullets.length === 0 && !confirm("No bullets. Continue?")) return; if (addStructuredEntry(sectionId, data)) cancelEdit('structured'); }
function addListItem(sectionId, itemData) { const section = dynamicSections.find(s => s.id === sectionId); if (!section || section.type !== 'list-item') return false; let entryData; if (typeof itemData === 'string') { entryData = { bullets: [itemData] }; } else { entryData = itemData; } let finalSortDate = entryData.sortDate; if (!finalSortDate && entryData.bullets && entryData.bullets.length > 0) { const firstMainBulletText = (typeof entryData.bullets[0] === 'string') ? entryData.bullets[0] : (entryData.bullets[0].text || ''); finalSortDate = parseDateForSorting(firstMainBulletText); if (!finalSortDate && firstMainBulletText && firstMainBulletText.match(/\d{4}/)) { console.warn(`Date in list item's first bullet "${firstMainBulletText}" not parsed for sorting.`); } } const dataToStore = { bullets: entryData.bullets || [], sortDate: finalSortDate || new Date(0) }; if (!resumeContentData.sections[sectionId]) resumeContentData.sections[sectionId] = []; if (editingContext && editingContext.sectionId === sectionId && editingContext.type === 'list-item' && typeof editingContext.entryIndex === 'number') { resumeContentData.sections[sectionId][editingContext.entryIndex] = dataToStore; } else { resumeContentData.sections[sectionId].push(dataToStore); } populateResumeContent(); return true; }
function addListItemForm() { const sectionId = document.getElementById('list-section-select').value; if (!sectionId) { alert("Select section."); return; } const bulletsData = []; document.querySelectorAll('#list-bullets-container .bullet-item').forEach((mainBulletEl) => { const mainText = mainBulletEl.querySelector('.main-bullet-input').value.trim(); if (mainText) { const subTexts = Array.from(mainBulletEl.querySelectorAll('.sub-bullet-item .sub-bullet-input')).map(subEl => subEl.value.trim()).filter(Boolean); bulletsData.push(subTexts.length > 0 ? { text: mainText, subBullets: subTexts } : mainText); } }); if (bulletsData.length === 0) { alert("At least one bullet is required for a list item entry."); return; } if (addListItem(sectionId, { bullets: bulletsData })) cancelEdit('list'); }
function addCourseworkEntryForm() { const sectionId = document.getElementById('coursework-section-select').value; if (!sectionId) { alert("Please select a coursework section."); return; } const courseNameInput = document.getElementById('coursework-name-new'); const courseGradeInput = document.getElementById('coursework-grade-new'); const showGradeCheckbox = document.getElementById('coursework-show-grade-new'); const courseName = courseNameInput.value.trim(); if (!courseName) { alert("Please enter a course name."); return; } const courseData = { name: courseName, grade: courseGradeInput.value.trim(), showGrade: showGradeCheckbox.checked }; const section = dynamicSections.find(s => s.id === sectionId); if (!section || section.type !== 'coursework-list') return; if (!resumeContentData.sections[sectionId]) { resumeContentData.sections[sectionId] = []; } if (editingContext && editingContext.type === 'coursework-list' && editingContext.sectionId === sectionId && typeof editingContext.courseIndex === 'number') { resumeContentData.sections[sectionId][editingContext.courseIndex] = courseData; } else { resumeContentData.sections[sectionId].push(courseData); } populateResumeContent(); cancelEdit('coursework'); }
function removeCourseworkEntry(sectionId, courseIndex) { if (confirm("Are you sure you want to remove this course?")) { if (resumeContentData.sections[sectionId] && resumeContentData.sections[sectionId][courseIndex] !== undefined) { resumeContentData.sections[sectionId].splice(courseIndex, 1); populateResumeContent(); if (editingContext && editingContext.type === 'coursework-list' && editingContext.sectionId === sectionId && editingContext.courseIndex === courseIndex) { cancelEdit('coursework'); } } } }
function handleResumeInteraction(event) { const target = event.target; const courseworkLiElement = target.closest('.coursework-list-preview li'); let entryElement = target.closest('.job-entry, .list-entry-item, .paragraph-entry, .coursework-list-preview-wrapper'); if (!entryElement && courseworkLiElement) { entryElement = courseworkLiElement.closest('.coursework-list-preview-wrapper'); } const bulletLiElement = target.closest('ul:not(.coursework-list-preview) > li[data-bullet-path]'); if (target.classList.contains('control-btn') && courseworkLiElement) { const sectionId = courseworkLiElement.closest('.coursework-list-preview-wrapper').dataset.sectionId; const courseIndex = parseInt(courseworkLiElement.dataset.courseIndex); const action = target.dataset.action; if (action === 'edit-course') { loadEntryForEditing(sectionId, courseIndex); } else if (action === 'remove-course') { removeCourseworkEntry(sectionId, courseIndex); } } else if (target.classList.contains('entry-control-button') && entryElement) { const sectionId = entryElement.dataset.sectionId; const entryIndex = parseInt(entryElement.dataset.entryIndex); const action = target.dataset.action; const section = dynamicSections.find(s => s.id === sectionId); if (action === 'edit') { loadEntryForEditing(sectionId, entryIndex); } else if (action === 'remove') { const typeForConfirm = (section.type === 'paragraph' || section.type === 'coursework-list') ? 'section\'s content' : 'entry'; if (confirm(`Remove this ${typeForConfirm}?`)) removeResumeEntry(sectionId, entryIndex); } else if (action === 'move-entry' || action === 'copy-entry') { if (section.type === 'coursework-list') { alert("Moving or copying the entire coursework list is not supported."); return; } openMoveCopyModal(sectionId, entryIndex, action); } } else if (target.classList.contains('bullet-control-btn') && bulletLiElement && entryElement) { const sectionId = entryElement.dataset.sectionId; const entryIndex = parseInt(entryElement.dataset.entryIndex); const bulletPath = JSON.parse(bulletLiElement.dataset.bulletPath); const action = target.dataset.action; const sectionType = dynamicSections.find(s => s.id === sectionId)?.type; if (action === 'edit-bullet') { loadEntryForEditing(sectionId, entryIndex); const formId = sectionType === 'structured-entry' ? 'add-structured-section' : (sectionType === 'list-item' ? 'add-list-section' : null); if (formId) document.getElementById(formId).scrollIntoView({ behavior: 'smooth' }); } else if (action === 'remove-bullet') { if (confirm('Remove bullet?')) removeResumeBulletOrSubBullet(sectionId, entryIndex, bulletPath); } } else if (courseworkLiElement) { const sectionId = courseworkLiElement.closest('.coursework-list-preview-wrapper').dataset.sectionId; const courseIndex = parseInt(courseworkLiElement.dataset.courseIndex); loadEntryForEditing(sectionId, courseIndex); document.getElementById('add-coursework-section-form').scrollIntoView({ behavior: 'smooth', block: 'nearest' }); } else if (target.classList.contains('bullet-text-content') && entryElement) { const sectionType = dynamicSections.find(s => s.id === entryElement.dataset.sectionId)?.type; if (sectionType === 'structured-entry' || sectionType === 'list-item') { loadEntryForEditing(entryElement.dataset.sectionId, parseInt(entryElement.dataset.entryIndex)); const formId = sectionType === 'structured-entry' ? 'add-structured-section' : 'add-list-section'; document.getElementById(formId).scrollIntoView({ behavior: 'smooth' }); } } else if (target.classList.contains('paragraph-content-display') && entryElement?.classList.contains('paragraph-entry')) { loadEntryForEditing(entryElement.dataset.sectionId, parseInt(entryElement.dataset.entryIndex)); document.getElementById('add-paragraph-section').scrollIntoView({ behavior: 'smooth', block: 'nearest' }); } }
function loadEntryForEditing(sectionId, index) { const section = dynamicSections.find(s => s.id === sectionId); if (!section) return; let formTypeKey; let formElementId; editingContext = { sectionId, type: section.type }; if (section.type === 'coursework-list') { formTypeKey = 'coursework'; formElementId = 'add-coursework-section-form'; editingContext.courseIndex = index; const courseData = resumeContentData.sections[sectionId]?.[index]; if (courseData) { document.getElementById('coursework-section-select').value = sectionId; document.getElementById('coursework-name-new').value = courseData.name; document.getElementById('coursework-grade-new').value = courseData.grade || ''; document.getElementById('coursework-show-grade-new').checked = courseData.showGrade; } } else { editingContext.entryIndex = index; const entryData = resumeContentData.sections[sectionId]?.[index]; if (section.type === 'education-entry') { formTypeKey = 'education'; formElementId = 'add-education-section'; document.getElementById('edu-section-select').value = sectionId; ['degree', 'institution', 'date', 'gpa', 'expected'].forEach(f => document.getElementById(`edu-${f}`).value = entryData?.[f] || ''); } else if (section.type === 'structured-entry') { formTypeKey = 'structured'; formElementId = 'add-structured-section'; document.getElementById('structured-section-select').value = sectionId; ['position', 'company', 'location', 'dates'].forEach(f => document.getElementById(`structured-${f}`).value = entryData?.[f] || ''); const bulletsContainer = document.getElementById('structured-bullets-container'); bulletsContainer.querySelectorAll('.bullet-item').forEach(item => item.remove()); (entryData?.bullets || []).forEach(bullet => { if (typeof bullet === 'string') addMainBulletInputForm('structured-bullets-container', bullet); else if (typeof bullet === 'object' && bullet.text) addMainBulletInputForm('structured-bullets-container', bullet.text, bullet.subBullets || []); }); if (!entryData?.bullets || entryData.bullets.length === 0) addMainBulletInputForm('structured-bullets-container', ''); } else if (section.type === 'list-item') { formTypeKey = 'list'; formElementId = 'add-list-section'; document.getElementById('list-section-select').value = sectionId; const bulletsContainer = document.getElementById('list-bullets-container'); bulletsContainer.querySelectorAll('.bullet-item').forEach(item => item.remove()); (entryData?.bullets || []).forEach(bullet => { if (typeof bullet === 'string') addMainBulletInputForm('list-bullets-container', bullet); else if (typeof bullet === 'object' && bullet.text) addMainBulletInputForm('list-bullets-container', bullet.text, bullet.subBullets || []); }); if (!entryData?.bullets || entryData.bullets.length === 0) addMainBulletInputForm('list-bullets-container', ''); } else if (section.type === 'paragraph') { formTypeKey = 'paragraph'; formElementId = 'add-paragraph-section'; document.getElementById('para-section-select').value = sectionId; document.getElementById('skills-content').value = entryData || ''; } } if(formTypeKey && formElementId) { setFormMode(formTypeKey, true); const formElement = document.getElementById(formElementId); if (formElement) formElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' }); } }
function removeResumeEntry(sectionId, entryIndex) { const section = dynamicSections.find(s => s.id === sectionId); if (!section) return; if (section.type === 'paragraph') { resumeContentData.sections[sectionId] = []; if (editingContext && editingContext.type === 'paragraph' && editingContext.sectionId === sectionId) { cancelEdit('paragraph'); } } else if (section.type === 'coursework-list') { if (confirm("Are you sure you want to remove all courses from this section?")) { resumeContentData.sections[sectionId] = []; if (editingContext && editingContext.type === 'coursework-list' && editingContext.sectionId === sectionId) { cancelEdit('coursework'); } } else { return; } } else if (resumeContentData.sections[sectionId]?.[entryIndex] !== undefined) { resumeContentData.sections[sectionId].splice(entryIndex, 1); if (editingContext && editingContext.type === section.type && editingContext.sectionId === sectionId && editingContext.entryIndex === entryIndex) { cancelEdit(section.type); } } populateResumeContent(); }
function removeResumeBulletOrSubBullet(sectionId, entryIndex, bulletPathArray) { const entry = resumeContentData.sections[sectionId]?.[entryIndex]; const currentSection = dynamicSections.find(s => s.id === sectionId); if (!entry || !currentSection || !entry.bullets || (currentSection.type !== 'structured-entry' && currentSection.type !== 'list-item')) { return; } const mainBulletIndex = bulletPathArray[0]; const subBulletIndex = bulletPathArray.length > 1 ? bulletPathArray[1] : undefined; if (entry.bullets[mainBulletIndex] === undefined) return; if (subBulletIndex !== undefined) { const mainBullet = entry.bullets[mainBulletIndex]; if (typeof mainBullet === 'object' && mainBullet.subBullets?.[subBulletIndex] !== undefined) { mainBullet.subBullets.splice(subBulletIndex, 1); if (mainBullet.subBullets.length === 0) entry.bullets[mainBulletIndex] = mainBullet.text; } } else { entry.bullets.splice(mainBulletIndex, 1); } populateResumeContent(); }
function populateResumeContent() { dynamicSections.forEach(section => { const contentDiv = document.getElementById(`content-${section.id}`); if (!contentDiv) { console.warn(`Content div for section ${section.id} not found.`); return; } contentDiv.innerHTML = ''; let entries = resumeContentData.sections[section.id] || []; if (['education-entry', 'structured-entry', 'list-item'].includes(section.type)) { entries.sort((a, b) => { const dateA = (a.sortDate instanceof Date && !isNaN(a.sortDate.getTime())) ? a.sortDate : new Date(0); const dateB = (b.sortDate instanceof Date && !isNaN(b.sortDate.getTime())) ? b.sortDate : new Date(0); return dateB.getTime() - dateA.getTime(); }); } if (section.type === 'coursework-list') { const courseworkPreviewWrapper = document.createElement('div'); courseworkPreviewWrapper.classList.add('coursework-list-preview-wrapper'); courseworkPreviewWrapper.dataset.sectionId = section.id; if (entries.length > 0) { const ul = document.createElement('ul'); ul.classList.add('coursework-list-preview'); const sortedEntries = [...entries].sort((a, b) => a.name.localeCompare(b.name)); sortedEntries.forEach((courseObj) => { const originalIndex = entries.findIndex(e => e.name === courseObj.name && e.grade === courseObj.grade); const li = document.createElement('li'); li.dataset.courseIndex = originalIndex; const textSpan = document.createElement('span'); textSpan.classList.add('course-text-content'); let courseText = processBolding(courseObj.name); if (courseObj.showGrade && courseObj.grade) { courseText += ` <span class="course-grade-display">(${courseObj.grade})</span>`; } textSpan.innerHTML = courseText; li.appendChild(textSpan); const itemControls = document.createElement('span'); itemControls.classList.add('course-item-controls'); itemControls.innerHTML = `<span class="control-btn edit" data-action="edit-course" title="Edit Course">✏️</span><span class="control-btn remove" data-action="remove-course" title="Remove Course">❌</span>`; li.appendChild(itemControls); ul.appendChild(li); }); courseworkPreviewWrapper.appendChild(ul); } contentDiv.appendChild(courseworkPreviewWrapper); } else { entries.forEach((entry, entryIdx) => { let entryWrapper; let specificEntryControlsHtml = `<div class="entry-controls"><button class="entry-control-button" data-action="edit" title="Edit">✏️</button><button class="entry-control-button" data-action="remove" title="Remove">❌</button>`; if (section.type === 'structured-entry' || section.type === 'education-entry') { specificEntryControlsHtml += `<button class="entry-control-button" data-action="move-entry" title="Move Entry">➔</button><button class="entry-control-button" data-action="copy-entry" title="Copy Entry">❏</button>`; } specificEntryControlsHtml += `</div>`; switch (section.type) { case 'education-entry': entryWrapper = document.createElement('div'); entryWrapper.classList.add('job-entry'); entryWrapper.dataset.sectionId = section.id; entryWrapper.dataset.entryIndex = entryIdx; let eduTitle = `<span>${processBolding(entry.degree||'')}</span><span>${processBolding(entry.date||'')}</span>`; let eduLoc = `<span>${processBolding(entry.institution||'')}</span><span>${processBolding(entry.gpa?'GPA: '+entry.gpa:'')}</span>`; entryWrapper.innerHTML = `<div class="job-title">${eduTitle}</div><div class="location">${eduLoc}</div>${entry.expected?`<p>${processBolding(entry.expected)}</p>`:''}`; entryWrapper.insertAdjacentHTML('afterbegin', specificEntryControlsHtml); contentDiv.appendChild(entryWrapper); break; case 'structured-entry': entryWrapper = document.createElement('div'); entryWrapper.classList.add('job-entry'); entryWrapper.dataset.sectionId = section.id; entryWrapper.dataset.entryIndex = entryIdx; let strTitle = `<span>${processBolding(entry.position||'')}</span><span>${processBolding(entry.dates||'')}</span>`; let strLoc = `<span>${processBolding(entry.company||'')}</span><span>${processBolding(entry.location||'')}</span>`; entryWrapper.innerHTML = `<div class="job-title">${strTitle}</div><div class="location">${strLoc}</div>`; if (entry.bullets?.length > 0) { const ulBullets = document.createElement('ul'); entry.bullets.forEach((bulletItem, mainIdx) => { const li = document.createElement('li'); li.dataset.bulletPath = JSON.stringify([mainIdx]); const bulletText = typeof bulletItem === 'string' ? bulletItem : bulletItem.text; li.innerHTML = `<span class="bullet-text-content">${processBolding(bulletText)}</span><span class="bullet-control-btn edit" data-action="edit-bullet" title="Edit">✏️</span><span class="bullet-control-btn remove" data-action="remove-bullet" title="Remove">❌</span>`; if (typeof bulletItem === 'object' && bulletItem.subBullets?.length > 0) { const subUl = document.createElement('ul'); bulletItem.subBullets.forEach((subTxt, subIdx) => { const subLi = document.createElement('li'); subLi.dataset.bulletPath = JSON.stringify([mainIdx, subIdx]); subLi.innerHTML = `<span class="bullet-text-content">${processBolding(subTxt)}</span><span class="bullet-control-btn edit" data-action="edit-bullet" title="Edit">✏️</span><span class="bullet-control-btn remove" data-action="remove-bullet" title="Remove">❌</span>`; subUl.appendChild(subLi); }); li.appendChild(subUl); } ulBullets.appendChild(li); }); entryWrapper.appendChild(ulBullets); } entryWrapper.insertAdjacentHTML('afterbegin', specificEntryControlsHtml); contentDiv.appendChild(entryWrapper); break; case 'list-item': entryWrapper = document.createElement('div'); entryWrapper.classList.add('list-entry-item'); entryWrapper.dataset.sectionId = section.id; entryWrapper.dataset.entryIndex = entryIdx; if (entry.bullets?.length > 0) { const ulBullets = document.createElement('ul'); entry.bullets.forEach((bulletItem, mainIdx) => { const li = document.createElement('li'); li.dataset.bulletPath = JSON.stringify([mainIdx]); const bulletText = typeof bulletItem === 'string' ? bulletItem : bulletItem.text; li.innerHTML = `<span class="bullet-text-content">${processBolding(bulletText)}</span><span class="bullet-control-btn edit" data-action="edit-bullet" title="Edit">✏️</span><span class="bullet-control-btn remove" data-action="remove-bullet" title="Remove">❌</span>`; if (typeof bulletItem === 'object' && bulletItem.subBullets?.length > 0) { const subUl = document.createElement('ul'); bulletItem.subBullets.forEach((subTxt, subIdx) => { const subLi = document.createElement('li'); subLi.dataset.bulletPath = JSON.stringify([mainIdx, subIdx]); subLi.innerHTML = `<span class="bullet-text-content">${processBolding(subTxt)}</span><span class="bullet-control-btn edit" data-action="edit-bullet" title="Edit">✏️</span><span class="bullet-control-btn remove" data-action="remove-bullet" title="Remove">❌</span>`; subUl.appendChild(subLi); }); li.appendChild(subUl); } ulBullets.appendChild(li); }); entryWrapper.appendChild(ulBullets); } entryWrapper.insertAdjacentHTML('afterbegin', specificEntryControlsHtml); contentDiv.appendChild(entryWrapper); break; case 'paragraph': const paragraphText = entry; if (paragraphText !== undefined) { entryWrapper = document.createElement('div'); entryWrapper.classList.add('paragraph-entry'); entryWrapper.dataset.sectionId = section.id; entryWrapper.dataset.entryIndex = entryIdx; const p = document.createElement('p'); p.innerHTML = processBolding(paragraphText || ''); p.classList.add('paragraph-content-display'); p.title = "Click to edit this paragraph block"; entryWrapper.insertAdjacentHTML('afterbegin', specificEntryControlsHtml); entryWrapper.appendChild(p); contentDiv.appendChild(entryWrapper); } break; } }); } }); }
function openMoveCopyModal(sourceSectionId, entryIndex, actionType) { const sourceSection = dynamicSections.find(s => s.id === sourceSectionId); if (!sourceSection) return; const entryType = sourceSection.type; if (entryType === 'coursework-list') { alert("Moving or copying the entire coursework section is not supported."); return; } moveCopyContext = { sourceSectionId, entryIndex, actionType, entryType }; const modal = document.getElementById('move-copy-modal'); const modalTitle = document.getElementById('move-copy-modal-title'); const targetSelect = document.getElementById('move-copy-target-section'); const confirmButton = document.getElementById('move-copy-confirm'); modalTitle.textContent = actionType === 'move-entry' ? 'Move Entry To...' : 'Copy Entry To...'; targetSelect.innerHTML = ''; let compatibleSections; if (actionType === 'copy-entry') { compatibleSections = dynamicSections.filter(s => s.type === entryType); } else { compatibleSections = dynamicSections.filter(s => s.type === entryType && s.id !== sourceSectionId); } if (compatibleSections.length === 0) { const option = document.createElement('option'); option.value = ""; option.textContent = (actionType === 'copy-entry' && dynamicSections.some(s => s.id === sourceSectionId && s.type === entryType)) ? "No *other* compatible sections" : "No compatible sections available"; targetSelect.appendChild(option); targetSelect.disabled = true; confirmButton.disabled = true; } else { compatibleSections.forEach(section => { const option = document.createElement('option'); option.value = section.id; option.textContent = section.title; if (section.id === sourceSectionId && actionType === 'copy-entry') { option.textContent += " (current section)"; } targetSelect.appendChild(option); }); targetSelect.disabled = false; confirmButton.disabled = false; } modal.style.display = 'block'; }
function closeMoveCopyModal() { const modal = document.getElementById('move-copy-modal'); modal.style.display = 'none'; moveCopyContext = null; }
function performMoveCopyEntry() { if (!moveCopyContext) return; const { sourceSectionId, entryIndex, actionType, entryType } = moveCopyContext; const targetSectionId = document.getElementById('move-copy-target-section').value; if (!targetSectionId) { alert("Please select a target section."); return; } if (entryType === 'coursework-list') { closeMoveCopyModal(); return; } const sourceSectionDataArray = resumeContentData.sections[sourceSectionId]; if (!sourceSectionDataArray || sourceSectionDataArray[entryIndex] === undefined) { console.error("Source entry not found for move/copy operation at index:", entryIndex); closeMoveCopyModal(); return; } let entryToProcess = JSON.parse(JSON.stringify(sourceSectionDataArray[entryIndex])); if (entryToProcess.hasOwnProperty('sortDate') && typeof entryToProcess.sortDate === 'string') { const parsedDate = new Date(entryToProcess.sortDate); if (!isNaN(parsedDate)) entryToProcess.sortDate = parsedDate; else { console.warn("Failed to parse date string during move/copy, defaulting:", entryToProcess.sortDate); entryToProcess.sortDate = new Date(0); } } else if (entryToProcess.hasOwnProperty('sortDate') && !(entryToProcess.sortDate instanceof Date)) { console.warn("sortDate was not a string or Date after stringify/parse, defaulting."); entryToProcess.sortDate = new Date(0); } if (!resumeContentData.sections[targetSectionId]) { resumeContentData.sections[targetSectionId] = []; } const targetArray = resumeContentData.sections[targetSectionId]; if (actionType === 'copy-entry') { if (targetSectionId === sourceSectionId && typeof entryIndex === 'number' && entryIndex < targetArray.length) { targetArray.splice(entryIndex + 1, 0, entryToProcess); } else { targetArray.push(entryToProcess); } } else { targetArray.push(entryToProcess); if (sourceSectionId === targetSectionId) { const originalSourceArray = resumeContentData.sections[sourceSectionId]; if (typeof entryIndex === 'number' && entryIndex < originalSourceArray.length) { originalSourceArray.splice(entryIndex, 1); } else { console.warn("Move within same section: original entryIndex invalid after push or was initially invalid."); } } else { if (typeof entryIndex === 'number' && entryIndex < sourceSectionDataArray.length) { sourceSectionDataArray.splice(entryIndex, 1); } else { console.warn("Move to different section: entryIndex invalid for source array."); } } } populateResumeContent(); closeMoveCopyModal(); }
function togglePrintPreviewMode() { document.body.classList.toggle('print-preview-mode'); const button = document.getElementById('toggle-print-preview-button'); if (document.body.classList.contains('print-preview-mode')) { button.textContent = 'Exit Print-Friendly View'; document.querySelector('.resume-area').scrollTop = 0; const resumeName = document.getElementById('resume-name').textContent; document.title = resumeName && resumeName.trim() !== '' ? `${resumeName} - Resume` : "Resume"; } else { button.textContent = 'Toggle Print-Friendly View'; document.title = originalDocumentTitle; } }
function renderResumeSections() { const resumeSectionsDiv = document.getElementById('resume-sections'); resumeSectionsDiv.innerHTML = ''; dynamicSections.forEach(section => { const sectionDiv = document.createElement('div'); sectionDiv.classList.add('resume-section'); sectionDiv.id = `resume-section-${section.id}`; const titleDiv = document.createElement('div'); titleDiv.classList.add('section-title'); titleDiv.textContent = section.title; const contentDiv = document.createElement('div'); contentDiv.classList.add('section-content'); contentDiv.id = `content-${section.id}`; sectionDiv.appendChild(titleDiv); sectionDiv.appendChild(contentDiv); resumeSectionsDiv.appendChild(sectionDiv); }); populateResumeContent(); }
function clearResumeContent() { if (confirm("This will clear all entries and remove your saved version from the browser. The page will reload with the default data. Are you sure?")) { localStorage.removeItem(LOCAL_STORAGE_KEY); location.reload(); } }
function toggleHeaderVisibility() { const visible = document.getElementById("toggleHeader").checked; const header = document.getElementById("resume-header"); if (header) header.style.display = visible ? "block" : "none"; }
function updateHeaderDataFromInputs() { resumeContentData.header.name = document.getElementById("name").value; resumeContentData.header.address = document.getElementById("address").value; resumeContentData.header.email = document.getElementById("email").value; resumeContentData.header.phone = document.getElementById("phone").value; resumeContentData.header.customLinks = []; const linkInputsContainer = document.getElementById('header-links-input-container'); const linkGroups = linkInputsContainer.querySelectorAll('.header-link-input-group'); linkGroups.forEach(group => { const label = group.querySelector('.link-label-input').value.trim(); const url = group.querySelector('.link-url-input').value.trim(); const showQr = group.querySelector('.link-qr-toggle').checked; if (url) { resumeContentData.header.customLinks.push({ label: label || url, url: url, showQr: showQr }); } }); }
function updateHeader() { updateHeaderDataFromInputs(); document.getElementById("resume-name").textContent = resumeContentData.header.name; document.getElementById("resume-contact").textContent = `${resumeContentData.header.address} | ${resumeContentData.header.email} | ${resumeContentData.header.phone}`; const resumeLinksDiv = document.getElementById("resume-header-links"); resumeLinksDiv.innerHTML = ''; if (resumeContentData.header.customLinks.length > 0) { const linksParagraph = document.createElement('p'); const qrCodeGenerationTasks = []; resumeContentData.header.customLinks.forEach((link, index) => { const linkItemSpan = document.createElement('span'); linkItemSpan.classList.add('header-link-item'); if (link.showQr) { const qrContainer = document.createElement('div'); qrContainer.classList.add('qr-code-container'); linkItemSpan.appendChild(qrContainer); qrCodeGenerationTasks.push({ element: qrContainer, url: link.url }); } const anchor = document.createElement('a'); anchor.href = link.url; anchor.textContent = link.label; anchor.target = "_blank"; linkItemSpan.appendChild(anchor); linksParagraph.appendChild(linkItemSpan); if (index < resumeContentData.header.customLinks.length - 1) { const separator = document.createElement('span'); separator.classList.add('link-separator'); separator.textContent = ' | '; linksParagraph.appendChild(separator); } }); resumeLinksDiv.appendChild(linksParagraph); if (typeof QRCode !== 'undefined') { qrCodeGenerationTasks.forEach(task => { try { new QRCode(task.element, { text: task.url, width: 45, height: 45, colorDark : "#000000", colorLight : "#ffffff", correctLevel : QRCode.CorrectLevel.H }); } catch (e) { console.error("Error generating QR code for:", task.url, e); task.element.textContent = '[QR Err]'; } }); } else { console.warn("QRCode library not loaded."); qrCodeGenerationTasks.forEach(task => { if(task.element) task.element.textContent = '[QR]'; }); } } }

// --- START THE APP ---
document.addEventListener('DOMContentLoaded', initializeResume);
